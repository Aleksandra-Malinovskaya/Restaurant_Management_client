import React, { useState, useEffect, useCallback } from "react";
import Navbar from "../../NavBar";
import { useAuth } from "../../../context/AuthContext";
import { useNavigate } from "react-router-dom";
import { $authHost } from "../../../http";
import { toast } from "react-toastify";
import socketService from "../../../services/socket";

const Chef = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [stats, setStats] = useState({
    activeOrders: 0,
    preparingOrders: 0,
    readyOrders: 0,
    stoppedDishes: 0,
    myActiveOrders: 0,
    todayPrepared: 0,
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [notifications, setNotifications] = useState([]);

  const chefCards = [
    {
      title: "üë®‚Äçüç≥ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏",
      path: "/chef/orders",
      color: "primary",
      icon: "bi-list-check",
    },
    {
      title: "üçΩÔ∏è –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
      description: "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–≥–æ –º–µ–Ω—é",
      path: "/chef/menu",
      color: "success",
      icon: "bi-book",
    },
    {
      title: "‚è±Ô∏è –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤",
      description: "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
      path: "/chef/history",
      color: "info",
      icon: "bi-clock-history",
    },
    {
      title: "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
      description: "–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
      path: "/chef/settings",
      color: "warning",
      icon: "bi-gear",
    },
  ];

  const handleCardClick = (path) => {
    navigate(path);
  };

  const handleRefreshStats = () => {
    loadStatistics();
  };

  const loadStatistics = useCallback(async () => {
    try {
      setLoading(true);
      setError("");

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
      const [ordersResponse, dishesResponse, kitchenItemsResponse] =
        await Promise.all([
          $authHost.get("/orders/kitchen").catch(() => ({ data: [] })),
          $authHost.get("/dishes").catch(() => ({ data: { rows: [] } })),
          $authHost.get("/order-items/kitchen").catch(() => ({ data: [] })),
        ]);

      const orders = Array.isArray(ordersResponse.data)
        ? ordersResponse.data
        : [];
      const dishes = Array.isArray(dishesResponse.data?.rows)
        ? dishesResponse.data.rows
        : dishesResponse.data || [];
      const kitchenItems = Array.isArray(kitchenItemsResponse.data)
        ? kitchenItemsResponse.data
        : [];

      console.log("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", {
        ordersCount: orders.length,
        dishesCount: dishes.length,
        kitchenItemsCount: kitchenItems.length,
        kitchenItemsSample: kitchenItems.slice(0, 3), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      });

      // 1. –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´ - –∑–∞–∫–∞–∑—ã, –≥–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ordered, preparing –∏–ª–∏ ready
      const activeOrders = orders.filter((order) => {
        if (!order.items || !Array.isArray(order.items)) return false;
        return order.items.some((item) =>
          ["ordered", "preparing", "ready"].includes(item.status)
        );
      }).length;

      // 2. –ó–ê–ö–ê–ó–´ –í –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–ò - –∑–∞–∫–∞–∑—ã, –≥–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º preparing
      const preparingOrders = orders.filter((order) => {
        if (!order.items || !Array.isArray(order.items)) return false;
        return order.items.some((item) => item.status === "preparing");
      }).length;

      // 3. –ó–ê–ö–ê–ó–´ –ì–û–¢–û–í–´–ï –ö –ü–û–î–ê–ß–ï - –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ready
      const readyOrders = orders.filter(
        (order) => order.status === "ready"
      ).length;

      // 4. –ë–õ–Æ–î–ê –ù–ê –°–¢–û–ü–ï
      const stoppedDishes = dishes.filter(
        (dish) => dish.isStopped === true
      ).length;

      // 5. –ú–û–ò –¢–ï–ö–£–©–ò–ï –ë–õ–Æ–î–ê
      const myActiveOrders = kitchenItems.filter((item) => {
        const isMyItem =
          item.chefId === user?.id || (item.chef && item.chef.id === user?.id);
        return isMyItem && item.status === "preparing";
      }).length;

      // 6. –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–û –°–ï–ì–û–î–ù–Ø - –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê
      const today = new Date();
      const todayStart = new Date(
        today.getFullYear(),
        today.getMonth(),
        today.getDate()
      );

      // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const allOrdersResponse = await $authHost.get("/orders");
      const allOrders = Array.isArray(allOrdersResponse.data)
        ? allOrdersResponse.data
        : [];

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª—é–¥–∞ –∏–∑ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const allItemsToday = [];
      allOrders.forEach((order) => {
        if (order.items && Array.isArray(order.items)) {
          const orderDate = new Date(order.createdAt);
          // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å–µ–≥–æ–¥–Ω—è
          if (orderDate >= todayStart) {
            order.items.forEach((item) => {
              allItemsToday.push({
                ...item,
                orderCreatedAt: order.createdAt,
                orderDate: orderDate,
              });
            });
          }
        }
      });

      const todayPrepared = allItemsToday.filter((item) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª—é–¥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —ç—Ç–∏–º –ø–æ–≤–∞—Ä–æ–º
        const isMyItem =
          item.chefId === user?.id || (item.chef && item.chef.id === user?.id);
        if (!isMyItem) return false;

        // –ë–ª—é–¥–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º –µ—Å–ª–∏ –æ–Ω–æ ready –∏–ª–∏ served
        // –ò –æ–Ω–æ –±—ã–ª–æ –≤ –∑–∞–∫–∞–∑–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Å–µ–≥–æ–¥–Ω—è
        return ["ready", "served"].includes(item.status);
      }).length;

      console.log("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è:", {
        allOrdersCount: allOrders.length,
        allItemsTodayCount: allItemsToday.length,
        todayPrepared,
        myItems: allItemsToday
          .filter(
            (item) =>
              item.chefId === user?.id ||
              (item.chef && item.chef.id === user?.id)
          )
          .map((item) => ({
            id: item.id,
            dish: item.dish?.name,
            status: item.status,
            chefId: item.chefId,
            chef: item.chef,
            orderCreatedAt: item.orderCreatedAt,
            orderDate: item.orderDate?.toISOString(),
          })),
      });

      setStats({
        activeOrders,
        preparingOrders,
        readyOrders,
        stoppedDishes,
        myActiveOrders,
        todayPrepared,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
    } finally {
      setLoading(false);
    }
  }, [user]);

  // WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–≤–∞—Ä–∞
  useEffect(() => {
    console.log("Chef: –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket");

    const newOrderHandler = (data) => {
      console.log("Chef: –ü–æ–ª—É—á–µ–Ω–æ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ:", data);

      toast.info(`üî• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${data.order?.id || data.orderId}`, {
        position: "bottom-right",
        autoClose: 5000,
      });

      setNotifications((prev) => [data, ...prev.slice(0, 4)]);
      loadStatistics();
    };

    try {
      socketService.subscribeToChefNotifications(newOrderHandler);

      if (user) {
        socketService.userConnected({
          role: "chef",
          userId: user.id,
        });
      }
    } catch (error) {
      console.error("Chef: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket:", error);
    }

    return () => {
      socketService.unsubscribeAll();
    };
  }, [user, loadStatistics]);

  useEffect(() => {
    loadStatistics();

    const interval = setInterval(loadStatistics, 60000);
    return () => clearInterval(interval);
  }, [loadStatistics]);

  if (loading) {
    return (
      <div className="min-vh-100 bg-light">
        <Navbar />
        <div className="d-flex justify-content-center align-items-center vh-100">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-vh-100 bg-light">
      <Navbar />

      <div className="container-fluid py-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="card bg-white shadow-sm">
              <div className="card-body">
                <div className="row align-items-center">
                  <div className="col-md-8">
                    <h1 className="h3 mb-2">
                      <i className="bi bi-speedometer2 me-2"></i>
                      –ü–∞–Ω–µ–ª—å –ø–æ–≤–∞—Ä–∞
                      {socketService.getConnectionStatus() && (
                        <span className="badge bg-success ms-2">
                          <i className="bi bi-wifi"></i> Online
                        </span>
                      )}
                    </h1>
                    <p className="text-muted mb-0">
                      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —à–µ—Ñ {user?.firstName} {user?.lastName}
                    </p>
                  </div>
                  <div className="col-md-4 text-end">
                    <span className="badge bg-warning fs-6">–ü–æ–≤–∞—Ä</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
        {error && (
          <div className="row mb-4">
            <div className="col-12">
              <div className="alert alert-warning d-flex align-items-center justify-content-between">
                <div>
                  <i className="bi bi-exclamation-triangle me-2"></i>
                  {error}
                </div>
                <button
                  className="btn btn-sm btn-outline-warning"
                  onClick={handleRefreshStats}
                >
                  <i className="bi bi-arrow-clockwise me-1"></i>
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π WebSocket */}
        {notifications.length > 0 && (
          <div className="row mb-4">
            <div className="col-12">
              <div className="card border-info">
                <div className="card-header bg-info text-white">
                  <i className="bi bi-bell me-2"></i>
                  –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                </div>
                <div className="card-body">
                  <div className="row">
                    {notifications.map((notif, index) => (
                      <div key={index} className="col-md-3 mb-2">
                        <div className="alert alert-info py-2">
                          <small>
                            <strong>{notif.message}</strong>
                            <br />
                            <span className="text-muted">
                              {notif.timestamp}
                            </span>
                          </small>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="card border-warning">
              <div className="card-header bg-warning text-white d-flex justify-content-between align-items-center">
                <span>
                  <i className="bi bi-info-circle me-2"></i>
                  –ö—É—Ö–æ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </span>
                <div>
                  <small className="me-3">
                    –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date().toLocaleTimeString()}
                  </small>
                  <button
                    className="btn btn-sm btn-light"
                    onClick={handleRefreshStats}
                    disabled={loading}
                  >
                    <i className="bi bi-arrow-clockwise me-1"></i>
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </button>
                </div>
              </div>
              <div className="card-body">
                <div className="row text-center">
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-primary mb-1">
                        {stats.activeOrders}
                      </h4>
                      <small className="text-muted">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-warning mb-1">
                        {stats.preparingOrders}
                      </h4>
                      <small className="text-muted">–í –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-success mb-1">{stats.readyOrders}</h4>
                      <small className="text-muted">–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–¥–∞—á–µ</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-danger mb-1">
                        {stats.stoppedDishes}
                      </h4>
                      <small className="text-muted">–ë–ª—é–¥ –Ω–∞ —Å—Ç–æ–ø–µ</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-info mb-1">{stats.myActiveOrders}</h4>
                      <small className="text-muted">–ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –±–ª—é–¥–∞</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-dark mb-1">{stats.todayPrepared}</h4>
                      <small className="text-muted">–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ */}
        <div className="row">
          <div className="col-12">
            <h4 className="mb-3">
              <i className="bi bi-grid-3x3-gap me-2"></i>
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ö–Ω–µ–π
            </h4>
          </div>
        </div>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π */}
        <div className="row g-3 justify-content-center">
          {chefCards.map((card, index) => (
            <div key={index} className="col-xl-3 col-lg-4 col-md-6">
              <div
                className={`card border-${card.color} shadow-sm h-100`}
                style={{ cursor: "pointer", transition: "all 0.3s" }}
                onClick={() => handleCardClick(card.path)}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = "translateY(-5px)";
                  e.currentTarget.style.boxShadow =
                    "0 8px 25px rgba(0,0,0,0.15)";
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = "translateY(0)";
                  e.currentTarget.style.boxShadow =
                    "0 2px 10px rgba(0,0,0,0.1)";
                }}
              >
                <div className="card-body text-center">
                  <i
                    className={`bi ${card.icon} text-${card.color} display-4 mb-3`}
                  ></i>
                  <h5 className="card-title">{card.title}</h5>
                  <p className="card-text text-muted">{card.description}</p>
                </div>
                <div
                  className={`card-footer bg-${card.color} bg-opacity-10 text-center`}
                >
                  <small className="text-muted">
                    <i className="bi bi-arrow-right me-1"></i>
                    –ü–µ—Ä–µ–π—Ç–∏
                  </small>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* –°—Ä–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        <div className="row mt-4">
          <div className="col-12">
            <div className="card border-danger">
              <div className="card-header bg-danger text-white">
                <i className="bi bi-bell me-2"></i>
                –°—Ä–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </div>
              <div className="card-body">
                {stats.stoppedDishes > 0 ? (
                  <div className="alert alert-warning mb-0">
                    <i className="bi bi-exclamation-triangle me-2"></i>
                    <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> {stats.stoppedDishes} –±–ª—é–¥(–∞)
                    –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —Å—Ç–æ–ø–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
                  </div>
                ) : (
                  <p className="text-muted mb-0">
                    <i className="bi bi-check-circle me-2 text-success"></i>
                    –í—Å–µ –±–ª—é–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
                  </p>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chef;
