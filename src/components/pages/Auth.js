import React, { useState, useEffect } from "react";
import { useAuth } from "../../context/AuthContext";
import { useNavigate } from "react-router-dom";

const Auth = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    firstName: "",
    lastName: "",
    confirmPassword: "",
  });
  const [error, setError] = useState("");
  const { user, login, register, isLoading } = useAuth();
  const navigate = useNavigate();

  // –†–µ–¥–∏—Ä–µ–∫—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  useEffect(() => {
    console.log("üîç Auth –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user);
    if (user) {
      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç...");

      // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        navigate("/", { replace: true });
      }, 100);
    }
  }, [user, navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!isLogin && formData.password !== formData.confirmPassword) {
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      return;
    }

    if (!isLogin && formData.password.length < 6) {
      setError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
      return;
    }

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã:", isLogin ? "Login" : "Register");

    const result = isLogin
      ? await login(formData.email, formData.password)
      : await register(
          formData.email,
          formData.password,
          formData.firstName,
          formData.lastName
        );

    console.log("üì® –†–µ–∑—É–ª—å—Ç–∞—Ç:", result);

    if (!result.success) {
      setError(result.message);
    } else {
      console.log("‚úÖ –£—Å–ø–µ—Ö! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω...");
      // –†–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è useEffect –≤—ã—à–µ
    }
  };

  return (
    <div className="container-fluid vh-100 bg-light">
      <div className="row h-100 justify-content-center align-items-center">
        <div className="col-md-5">
          <div className="card shadow">
            <div
              className="card-header text-white text-center"
              style={{
                background: "linear-gradient(45deg, #007bff, #0056b3)",
              }}
            >
              <h4 className="mb-0">
                <i className="bi bi-shop me-2"></i>
                –†–µ—Å—Ç–æ—Ä–∞–Ω
              </h4>
              <small>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</small>
            </div>

            <div className="card-body p-4">
              <div className="text-center mb-4">
                <div className="btn-group" role="group">
                  <button
                    type="button"
                    className={`btn ${
                      isLogin ? "btn-primary" : "btn-outline-primary"
                    }`}
                    onClick={() => setIsLogin(true)}
                  >
                    –í—Ö–æ–¥
                  </button>
                  <button
                    type="button"
                    className={`btn ${
                      !isLogin ? "btn-primary" : "btn-outline-primary"
                    }`}
                    onClick={() => setIsLogin(false)}
                  >
                    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                  </button>
                </div>
              </div>

              {error && (
                <div className="alert alert-danger alert-dismissible fade show">
                  {error}
                  <button
                    type="button"
                    className="btn-close"
                    onClick={() => setError("")}
                  ></button>
                </div>
              )}

              <form onSubmit={handleSubmit}>
                {!isLogin && (
                  <div className="row">
                    <div className="col-md-6 mb-3">
                      <label className="form-label">–ò–º—è *</label>
                      <input
                        type="text"
                        className="form-control"
                        value={formData.firstName}
                        onChange={(e) =>
                          setFormData({
                            ...formData,
                            firstName: e.target.value,
                          })
                        }
                        required
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                      />
                    </div>
                    <div className="col-md-6 mb-3">
                      <label className="form-label">–§–∞–º–∏–ª–∏—è *</label>
                      <input
                        type="text"
                        className="form-control"
                        value={formData.lastName}
                        onChange={(e) =>
                          setFormData({ ...formData, lastName: e.target.value })
                        }
                        required
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                      />
                    </div>
                  </div>
                )}

                <div className="mb-3">
                  <label className="form-label">Email *</label>
                  <input
                    type="email"
                    className="form-control"
                    value={formData.email}
                    onChange={(e) =>
                      setFormData({ ...formData, email: e.target.value })
                    }
                    required
                    placeholder="example@mail.com"
                  />
                </div>

                <div className="mb-3">
                  <label className="form-label">–ü–∞—Ä–æ–ª—å *</label>
                  <input
                    type="password"
                    className="form-control"
                    value={formData.password}
                    onChange={(e) =>
                      setFormData({ ...formData, password: e.target.value })
                    }
                    required
                    placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
                    minLength="6"
                  />
                </div>

                {!isLogin && (
                  <div className="mb-3">
                    <label className="form-label">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å *</label>
                    <input
                      type="password"
                      className="form-control"
                      value={formData.confirmPassword}
                      onChange={(e) =>
                        setFormData({
                          ...formData,
                          confirmPassword: e.target.value,
                        })
                      }
                      required
                      placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    />
                  </div>
                )}

                <button
                  type="submit"
                  className="btn btn-primary w-100 py-2"
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <>
                      <span className="spinner-border spinner-border-sm me-2"></span>
                      {isLogin ? "–í—Ö–æ–¥..." : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..."}
                    </>
                  ) : isLogin ? (
                    "–í–æ–π—Ç–∏"
                  ) : (
                    "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
                  )}
                </button>
              </form>

              <div className="text-center mt-3">
                <small className="text-muted">
                  {isLogin ? "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?" : "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?"}{" "}
                  <button
                    type="button"
                    className="btn btn-link p-0 text-decoration-none"
                    onClick={() => setIsLogin(!isLogin)}
                  >
                    {isLogin ? "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" : "–í–æ–π—Ç–∏"}
                  </button>
                </small>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Auth;
