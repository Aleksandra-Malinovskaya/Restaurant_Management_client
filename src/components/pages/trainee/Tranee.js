import React, { useState, useEffect, useCallback, useRef } from "react";
import Navbar from "../../NavBar";
import { useAuth } from "../../../context/AuthContext";
import { useNavigate } from "react-router-dom";
import { $authHost } from "../../../http";
import { toast } from "react-toastify";
import socketService from "../../../services/socket";

const Tranee = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [stats, setStats] = useState({
    activeOrders: 0,
    readyOrders: 0,
    occupiedTables: 0,
    freeTables: 0,
    todayReservations: 0,
    todayRevenue: 0,
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [notifications, setNotifications] = useState([]);

  // Refs –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const notificationTimeoutRef = useRef(null);
  const processedNotificationsRef = useRef(new Set());

  const loadStatistics = useCallback(async () => {
    try {
      setLoading(true);
      setError("");

      const [ordersResponse, tablesResponse, reservationsResponse] =
        await Promise.all([
          $authHost.get("/orders").catch(() => ({ data: [] })),
          $authHost.get("/tables").catch(() => ({ data: [] })),
          $authHost.get("/reservations").catch(() => ({ data: [] })),
        ]);

      const orders = Array.isArray(ordersResponse.data)
        ? ordersResponse.data
        : [];
      const tables = Array.isArray(tablesResponse.data)
        ? tablesResponse.data
        : [];
      const reservations = Array.isArray(reservationsResponse.data)
        ? reservationsResponse.data
        : [];

      // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      const activeOrders = orders.filter((order) =>
        ["open", "in_progress", "ready"].includes(order.status)
      ).length;

      // –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
      const readyOrders = orders.filter(
        (order) => order.status === "ready"
      ).length;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–æ–ª–∏–∫–æ–≤
      const now = new Date();
      const occupiedTables = tables.filter((table) => {
        const tableOrders = orders.filter(
          (order) =>
            order.tableId === table.id &&
            ["open", "in_progress", "ready"].includes(order.status)
        );

        const currentReservation = reservations.find(
          (reservation) =>
            reservation.tableId === table.id &&
            new Date(reservation.reservedFrom) <= now &&
            new Date(reservation.reservedTo) >= now &&
            ["confirmed", "seated"].includes(reservation.status)
        );

        return (
          tableOrders.length > 0 ||
          (currentReservation && currentReservation.status === "seated")
        );
      }).length;

      const freeTables = tables.length - occupiedTables;

      // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const today = new Date().toISOString().split("T")[0];
      const todayReservations = reservations.filter((reservation) => {
        const reservationDate = new Date(reservation.reservedFrom)
          .toISOString()
          .split("T")[0];
        return (
          reservationDate === today &&
          ["confirmed", "seated"].includes(reservation.status)
        );
      }).length;

      // –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const todayRevenue = orders
        .filter((order) => {
          const orderDate = order.createdAt
            ? order.createdAt.split("T")[0]
            : "";
          return orderDate === today && order.status === "closed";
        })
        .reduce((sum, order) => sum + (order.totalAmount || 0), 0);

      setStats({
        activeOrders,
        readyOrders,
        occupiedTables,
        freeTables,
        todayReservations,
        todayRevenue,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
    } finally {
      setLoading(false);
    }
  }, []);

  const formatCurrency = (amount) => {
    const numAmount = parseFloat(amount) || 0;
    return new Intl.NumberFormat("ru-RU", {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(numAmount);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const addNotification = useCallback(
    (data, type = "dish") => {
      const notificationId =
        type === "dish"
          ? `dish-${data.orderId}-${data.dishName}`
          : `order-${data.orderId}`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (processedNotificationsRef.current.has(notificationId)) {
        console.log(
          `üîÑ Tranee: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId}`
        );
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
      processedNotificationsRef.current.add(notificationId);

      // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
      if (notificationTimeoutRef.current) {
        clearTimeout(notificationTimeoutRef.current);
      }
      notificationTimeoutRef.current = setTimeout(() => {
        processedNotificationsRef.current.delete(notificationId);
      }, 10000);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast
      if (type === "dish") {
        toast.info(`üçΩÔ∏è ${data.message}`, {
          position: "top-right",
          autoClose: 6000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
        });
      } else {
        toast.success(`üõéÔ∏è ${data.message}`, {
          position: "top-right",
          autoClose: 8000,
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      setNotifications((prev) => {
        const newNotification = {
          ...data,
          id: notificationId,
          type,
          timestamp: data.timestamp || new Date().toLocaleTimeString(),
        };

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ 6 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        return [newNotification, ...prev.slice(0, 5)];
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      loadStatistics();
    },
    [loadStatistics]
  );

  // WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  useEffect(() => {
    console.log("Tranee: –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket");

    const dishNotificationHandler = (data) => {
      console.log("üçΩÔ∏è Tranee: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–æ–º –±–ª—é–¥–µ:", data);
      addNotification(data, "dish");
    };

    const orderNotificationHandler = (data) => {
      console.log("üõéÔ∏è Tranee: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–æ–º –∑–∞–∫–∞–∑–µ:", data);
      addNotification(data, "order");
    };

    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      socketService.connect();

      // –°–æ–æ–±—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –æ —Ä–æ–ª–∏ —Å—Ç–∞–∂–µ—Ä–∞
      if (user) {
        console.log(
          "üì§ Tranee: –û—Ç–ø—Ä–∞–≤–∫–∞ user_connected —Å —Ä–æ–ª—å—é tranee, userId:",
          user.id
        );
        socketService.userConnected({
          role: "tranee",
          userId: user.id,
        });
      }

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      socketService.subscribeToWaiterDishNotifications(dishNotificationHandler);
      socketService.subscribeToWaiterOrderNotifications(
        orderNotificationHandler
      );
    } catch (error) {
      console.error("‚ùå Tranee: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º —Å –∫—É—Ö–Ω–∏");
    }

    return () => {
      console.log("üßπ Tranee: –û—á–∏—Å—Ç–∫–∞ WebSocket –ø–æ–¥–ø–∏—Å–æ–∫");
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      socketService.unsubscribeAll();

      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
      if (notificationTimeoutRef.current) {
        clearTimeout(notificationTimeoutRef.current);
      }
    };
  }, [user, addNotification]);

  useEffect(() => {
    loadStatistics();

    const interval = setInterval(loadStatistics, 60000);
    return () => clearInterval(interval);
  }, [loadStatistics]);

  const traneeCards = [
    {
      title: "üìã –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
      description: "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–≥–æ –º–µ–Ω—é –∏ —Å–æ—Å—Ç–∞–≤–∞ –±–ª—é–¥",
      path: "/tranee/menu",
      color: "success",
      icon: "bi-book",
    },
    {
      title: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
      description: "–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∏ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
      path: "/tranee/settings",
      color: "warning",
      icon: "bi-gear",
    },
  ];

  const handleCardClick = (path) => {
    navigate(path);
  };

  const handleRefreshStats = () => {
    loadStatistics();
  };

  const clearNotifications = () => {
    setNotifications([]);
    processedNotificationsRef.current.clear();
  };

  if (loading) {
    return (
      <div className="min-vh-100 bg-light">
        <Navbar />
        <div className="d-flex justify-content-center align-items-center vh-100">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-vh-100 bg-light">
      <Navbar />

      <div className="container-fluid py-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="card bg-white shadow-sm">
              <div className="card-body">
                <div className="row align-items-center">
                  <div className="col-md-8">
                    <h1 className="h3 mb-2">
                      <i className="bi bi-person-badge me-2"></i>
                      –ü–∞–Ω–µ–ª—å —Å—Ç–∞–∂–µ—Ä–∞
                      {socketService.getConnectionStatus() && (
                        <span className="badge bg-success ms-2">
                          <i className="bi bi-wifi"></i> Online
                        </span>
                      )}
                    </h1>
                    <p className="text-muted mb-0">
                      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.firstName} {user?.lastName}
                    </p>
                    <small className="text-info">
                      <i className="bi bi-info-circle me-1"></i>
                      –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è - –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    </small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
        {error && (
          <div className="row mb-4">
            <div className="col-12">
              <div className="alert alert-warning d-flex align-items-center justify-content-between">
                <div>
                  <i className="bi bi-exclamation-triangle me-2"></i>
                  {error}
                </div>
                <button
                  className="btn btn-sm btn-outline-warning"
                  onClick={handleRefreshStats}
                >
                  <i className="bi bi-arrow-clockwise me-1"></i>
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π WebSocket */}
        {notifications.length > 0 && (
          <div className="row mb-4">
            <div className="col-12">
              <div className="card border-success">
                <div className="card-header bg-success text-white d-flex justify-content-between align-items-center">
                  <span>
                    <i className="bi bi-bell me-2"></i>
                    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫—É—Ö–Ω–∏ ({notifications.length})
                  </span>
                  <button
                    className="btn btn-sm btn-light"
                    onClick={clearNotifications}
                  >
                    <i className="bi bi-trash me-1"></i>
                    –û—á–∏—Å—Ç–∏—Ç—å
                  </button>
                </div>
                <div className="card-body">
                  <div className="row">
                    {notifications.map((notif) => (
                      <div key={notif.id} className="col-md-4 mb-2">
                        <div className="alert alert-success py-2">
                          <small>
                            <strong>{notif.message}</strong>
                            <br />
                            <span className="text-muted">
                              <i className="bi bi-clock me-1"></i>
                              {notif.timestamp}
                            </span>
                            {notif.tableNumber && (
                              <>
                                <br />
                                <span className="text-muted">
                                  <i className="bi bi-table me-1"></i>
                                  –°—Ç–æ–ª: {notif.tableNumber}
                                </span>
                              </>
                            )}
                          </small>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="card border-info">
              <div className="card-header bg-info text-white d-flex justify-content-between align-items-center">
                <span>
                  <i className="bi bi-graph-up me-2"></i>
                  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)
                </span>
                <div>
                  <small className="me-3">
                    –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date().toLocaleTimeString()}
                  </small>
                  <button
                    className="btn btn-sm btn-light"
                    onClick={handleRefreshStats}
                    disabled={loading}
                  >
                    <i className="bi bi-arrow-clockwise me-1"></i>
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </button>
                </div>
              </div>
              <div className="card-body">
                <div className="row text-center">
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-primary mb-1">
                        {stats.activeOrders}
                      </h4>
                      <small className="text-muted">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-warning mb-1">{stats.readyOrders}</h4>
                      <small className="text-muted">–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–¥–∞—á–µ</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-danger mb-1">
                        {stats.occupiedTables}
                      </h4>
                      <small className="text-muted">–ó–∞–Ω—è—Ç–æ —Å—Ç–æ–ª–∏–∫–æ–≤</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-success mb-1">{stats.freeTables}</h4>
                      <small className="text-muted">–°–≤–æ–±–æ–¥–Ω–æ —Å—Ç–æ–ª–∏–∫–æ–≤</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-info mb-1">
                        {stats.todayReservations}
                      </h4>
                      <small className="text-muted">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-dark mb-1">
                        {formatCurrency(stats.todayRevenue)}
                      </h4>
                      <small className="text-muted">–í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ */}
        <div className="row">
          <div className="col-12">
            <h4 className="mb-3">
              <i className="bi bi-mortarboard me-2"></i>
              –§—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞–∂–µ—Ä–∞
            </h4>
          </div>
        </div>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π */}
        <div className="row g-3 justify-content-center">
          {traneeCards.map((card, index) => (
            <div key={index} className="col-xl-3 col-lg-4 col-md-6">
              <div
                className={`card border-${card.color} shadow-sm h-100`}
                style={{ cursor: "pointer", transition: "all 0.3s" }}
                onClick={() => handleCardClick(card.path)}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = "translateY(-5px)";
                  e.currentTarget.style.boxShadow =
                    "0 8px 25px rgba(0,0,0,0.15)";
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = "translateY(0)";
                  e.currentTarget.style.boxShadow =
                    "0 2px 10px rgba(0,0,0,0.1)";
                }}
              >
                <div className="card-body text-center">
                  <i
                    className={`bi ${card.icon} text-${card.color} display-4 mb-3`}
                  ></i>
                  <h5 className="card-title">{card.title}</h5>
                  <p className="card-text text-muted">{card.description}</p>
                </div>
                <div
                  className={`card-footer bg-${card.color} bg-opacity-10 text-center`}
                >
                  <small className="text-muted">
                    <i className="bi bi-arrow-right me-1"></i>
                    –ü–µ—Ä–µ–π—Ç–∏
                  </small>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞ */}
        <div className="row mt-4">
          <div className="col-12">
            <div className="card border-primary">
              <div className="card-header bg-primary text-white">
                <i className="bi bi-mortarboard me-2"></i>
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞
              </div>
              <div className="card-body">
                <div className="row">
                  <div className="col-md-6">
                    <h6>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</h6>
                    <ul className="list-unstyled">
                      <li>
                        <i className="bi bi-check-circle text-success me-2"></i>
                        –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                      </li>
                      <li>
                        <i className="bi bi-check-circle text-success me-2"></i>
                        –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ª–∞
                      </li>
                      <li>
                        <i className="bi bi-check-circle text-success me-2"></i>
                        –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∫—É—Ö–Ω–∏
                      </li>
                      <li>
                        <i className="bi bi-check-circle text-success me-2"></i>
                        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
                      </li>
                    </ul>
                  </div>
                  <div className="col-md-6">
                    <h6>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</h6>
                    <ul className="list-unstyled">
                      <li>
                        <i className="bi bi-x-circle text-secondary me-2"></i>
                        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞–º–∏
                      </li>
                      <li>
                        <i className="bi bi-x-circle text-secondary me-2"></i>
                        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
                      </li>
                      <li>
                        <i className="bi bi-x-circle text-secondary me-2"></i>
                        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
                      </li>
                      <li>
                        <i className="bi bi-x-circle text-secondary me-2"></i>
                        –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                      </li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Tranee;
