import React, { useState, useEffect, useCallback, useRef } from "react";
import { useNavigate, useParams } from "react-router-dom";
import Navbar from "../../NavBar";
import { $authHost } from "../../../http";
import { useAuth } from "../../../context/AuthContext";
import {
  autoCompleteReservation,
  autoUpdateReservationToSeated,
  formatLocalDateTime,
  localToUTC,
  formatForDateTimeLocal,
} from "../../../utils/dateUtils";
import { toast } from "react-toastify";
import socketService from "../../../services/socket";

const WaiterTable = () => {
  const { tableId } = useParams();
  const { user } = useAuth();
  const navigate = useNavigate();

  const [table, setTable] = useState(null);
  const [orders, setOrders] = useState([]);
  const [reservations, setReservations] = useState([]);
  const [dishes, setDishes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [activeTab, setActiveTab] = useState("order");
  const [notifications, setNotifications] = useState([]);

  // Refs –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const notificationTimeoutRef = useRef(null);
  const processedNotificationsRef = useRef(new Set());

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º
  const [showReservationModal, setShowReservationModal] = useState(false);
  const [showOrderModal, setShowOrderModal] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);

  const [reservationForm, setReservationForm] = useState({
    customerName: "",
    customerPhone: "",
    guestCount: 2,
    reservedFrom: "",
    reservedTo: "",
  });

  const [orderForm, setOrderForm] = useState({
    items: [],
  });

  const [newOrderItem, setNewOrderItem] = useState({
    dishId: "",
    quantity: 1,
    notes: "",
  });

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  const loadTableData = useCallback(async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∞
      const tableResponse = await $authHost.get(`/tables/${tableId}`);
      setTable(tableResponse.data);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å—Ç–æ–ª–∏–∫–∞ (–í–ö–õ–Æ–ß–ê–Ø payment)
      const ordersResponse = await $authHost.get("/orders");
      const tableOrders = ordersResponse.data.filter(
        (order) =>
          order.tableId === parseInt(tableId) &&
          ["open", "in_progress", "ready", "served", "payment"].includes(
            order.status
          )
      );

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω
      const ordersWithCorrectPrices = tableOrders.map((order) => ({
        ...order,
        items: order.items.map((item) => ({
          ...item,
          price: item.itemPrice || item.dish?.price || 0,
        })),
      }));

      setOrders(ordersWithCorrectPrices);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞
      const reservationsResponse = await $authHost.get("/reservations");
      const tableReservations = reservationsResponse.data.filter(
        (reservation) => reservation.tableId === parseInt(tableId)
      );
      setReservations(tableReservations);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
      if (dishes.length === 0) {
        const dishesResponse = await $authHost.get("/dishes");
        setDishes(dishesResponse.data.rows || dishesResponse.data);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–∞:", error);
      if (!error.message.includes("Network Error")) {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∞");
      }
    } finally {
      setLoading(false);
    }
  }, [tableId, dishes.length]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const addNotification = useCallback(
    (data, type = "dish") => {
      const notificationId =
        type === "dish"
          ? `dish-${data.orderId}-${data.dishName}`
          : `order-${data.orderId}`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (processedNotificationsRef.current.has(notificationId)) {
        console.log(
          `üîÑ WaiterTable: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId}`
        );
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
      processedNotificationsRef.current.add(notificationId);

      // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
      if (notificationTimeoutRef.current) {
        clearTimeout(notificationTimeoutRef.current);
      }
      notificationTimeoutRef.current = setTimeout(() => {
        processedNotificationsRef.current.delete(notificationId);
      }, 10000);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast
      if (type === "dish") {
        toast.info(`üçΩÔ∏è ${data.message}`, {
          position: "top-right",
          autoClose: 6000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
        });
      } else {
        toast.success(`üõéÔ∏è ${data.message}`, {
          position: "top-right",
          autoClose: 8000,
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      setNotifications((prev) => {
        const newNotification = {
          ...data,
          id: notificationId,
          type,
          timestamp: data.timestamp || new Date().toLocaleTimeString(),
        };

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ 6 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        return [newNotification, ...prev.slice(0, 5)];
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
      loadTableData();
    },
    [loadTableData]
  ); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å

  // WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  useEffect(() => {
    console.log("WaiterTable: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket");

    const orderNotificationHandler = (data) => {
      console.log("üõéÔ∏è WaiterTable: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–æ–º –∑–∞–∫–∞–∑–µ:", data);
      addNotification(data, "order");
    };

    const dishNotificationHandler = (data) => {
      console.log("üçΩÔ∏è WaiterTable: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–æ–º –±–ª—é–¥–µ:", data);
      addNotification(data, "dish");
    };

    try {
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      socketService.subscribeToWaiterOrderNotifications(
        orderNotificationHandler
      );
      socketService.subscribeToWaiterDishNotifications(dishNotificationHandler);

      return () => {
        console.log("üßπ WaiterTable: –û—á–∏—Å—Ç–∫–∞ WebSocket –ø–æ–¥–ø–∏—Å–æ–∫");
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        socketService.unsubscribeAll();

        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        if (notificationTimeoutRef.current) {
          clearTimeout(notificationTimeoutRef.current);
        }
      };
    } catch (error) {
      console.error("‚ùå WaiterTable: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket:", error);
    }
  }, [addNotification]);

  useEffect(() => {
    if (tableId) {
      loadTableData();

      // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      const interval = setInterval(loadTableData, 5000);
      return () => clearInterval(interval);
    }
  }, [tableId, loadTableData]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  useEffect(() => {
    const checkAndCompleteReservations = async () => {
      try {
        const now = new Date();

        for (const reservation of reservations) {
          // –ï—Å–ª–∏ –±—Ä–æ–Ω—å –≤ —Å—Ç–∞—Ç—É—Å–µ "seated" –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
          if (reservation.status === "seated") {
            const reservedTo = new Date(reservation.reservedTo);
            const fifteenMinutesAfter = new Date(
              reservedTo.getTime() + 15 * 60000
            );

            // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const timezoneOffset = now.getTimezoneOffset() * 60000;
            const localNow = new Date(
              now.getTime() + timezoneOffset + 3 * 60 * 60000
            );
            const localFifteenMinutesAfter = new Date(
              fifteenMinutesAfter.getTime() + timezoneOffset + 3 * 60 * 60000
            );

            if (localNow > localFifteenMinutesAfter) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
              const tableOrders = orders.filter(
                (order) =>
                  order.tableId === reservation.tableId &&
                  [
                    "open",
                    "in_progress",
                    "ready",
                    "served",
                    "payment",
                  ].includes(order.status)
              );

              // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º –±—Ä–æ–Ω—å
              if (tableOrders.length === 0) {
                await $authHost.put(`/reservations/${reservation.id}`, {
                  status: "completed",
                });
                console.log(
                  `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${reservation.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏`
                );
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                await loadTableData();
              }
            }
          }
        }
      } catch (error) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:",
          error
        );
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    const interval = setInterval(checkAndCompleteReservations, 5 * 60 * 1000);

    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkAndCompleteReservations();

    return () => clearInterval(interval);
  }, [reservations, orders, loadTableData]);

  // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å—Ç–æ–ª–æ–≤
  const handleBack = () => {
    navigate("/waiter/tables");
  };

  const clearNotifications = () => {
    setNotifications([]);
    processedNotificationsRef.current.clear();
  };

  const handleCreateReservation = () => {
    const now = new Date();

    // –ü—Ä–æ—Å—Ç–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const from = new Date(now.getTime() + 30 * 60000); // +30 –º–∏–Ω—É—Ç
    const to = new Date(from.getTime() + 2 * 60 * 60000); // +2 —á–∞—Å–∞

    console.log("–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ - –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:", {
      now: now.toLocaleString("ru-RU"),
      from: from.toLocaleString("ru-RU"),
      to: to.toLocaleString("ru-RU"),
      fromFormatted: formatForDateTimeLocal(from),
      toFormatted: formatForDateTimeLocal(to),
    });

    setReservationForm({
      customerName: "",
      customerPhone: "",
      guestCount: table ? Math.min(table.capacity, 2) : 2,
      reservedFrom: formatForDateTimeLocal(from),
      reservedTo: formatForDateTimeLocal(to),
    });
    setShowReservationModal(true);
  };

  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

  const handleReservationSubmit = async (e) => {
    e.preventDefault();
    try {
      const reservationData = {
        tableId: parseInt(tableId),
        customerName: reservationForm.customerName,
        customerPhone: reservationForm.customerPhone,
        guestCount: reservationForm.guestCount,
        reservedFrom: localToUTC(reservationForm.reservedFrom),
        reservedTo: localToUTC(reservationForm.reservedTo),
        status: "confirmed",
      };

      await $authHost.post("/reservations", reservationData);
      setSuccess("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ");
      setShowReservationModal(false);
      await loadTableData();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
      setError(
        error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
      );
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
  const handleCreateOrder = () => {
    setSelectedOrder(null);
    setOrderForm({ items: [] });
    setNewOrderItem({ dishId: "", quantity: 1, notes: "" });
    setShowOrderModal(true);
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
  const handleAddToOrder = (order) => {
    setSelectedOrder(order);
    setOrderForm({ items: [] });
    setNewOrderItem({ dishId: "", quantity: 1, notes: "" });
    setShowOrderModal(true);
  };

  const handleAddOrderItem = () => {
    if (!newOrderItem.dishId) {
      setError("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ");
      return;
    }

    const selectedDish = dishes.find(
      (dish) => dish.id === parseInt(newOrderItem.dishId)
    );
    if (!selectedDish) {
      setError("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      return;
    }

    const newItem = {
      id: Date.now() + Math.random(),
      dishId: parseInt(newOrderItem.dishId),
      dish: selectedDish,
      quantity: newOrderItem.quantity,
      notes: newOrderItem.notes,
      price: selectedDish.price,
      status: "ordered",
    };

    setOrderForm((prev) => ({
      ...prev,
      items: [...prev.items, newItem],
    }));

    setNewOrderItem({ dishId: "", quantity: 1, notes: "" });
  };

  const handleOrderSubmit = async (e) => {
    e.preventDefault();
    try {
      if (orderForm.items.length === 0) {
        setError("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ –≤ –∑–∞–∫–∞–∑");
        return;
      }

      if (selectedOrder) {
        const orderData = {
          items: orderForm.items.map((item) => ({
            dishId: item.dishId,
            quantity: item.quantity,
            notes: item.notes,
            price: item.price || item.dish?.price,
          })),
        };

        await $authHost.post(`/orders/${selectedOrder.id}/items`, orderData);
        setSuccess("–ù–æ–≤—ã–µ –±–ª—é–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–∫–∞–∑");
      } else {
        const orderData = {
          tableId: parseInt(tableId),
          waiterId: user.id,
          items: orderForm.items.map((item) => ({
            dishId: item.dishId,
            quantity: item.quantity,
            notes: item.notes,
            price: item.price || item.dish?.price,
          })),
        };

        await $authHost.post("/orders", orderData);
        setSuccess("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");

        // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–†–û–ù–ò –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ó–ê–ö–ê–ó–ê
        await autoUpdateReservationToSeated(parseInt(tableId), $authHost);
      }

      setShowOrderModal(false);
      await loadTableData();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
      if (error.response?.status === 404) {
        setError(
          "Endpoint –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        );
      } else {
        setError(error.response?.data?.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑");
      }
    }
  };

  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

  // –§–£–ù–ö–¶–ò–Ø: –ü–æ–¥–∞—á–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–ª—é–¥–∞
  const handleServeDish = async (orderItemId) => {
    try {
      await $authHost.put(`/orders/order-items/${orderItemId}/served`);
      setSuccess("–ë–ª—é–¥–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–æ–¥–∞–Ω–Ω–æ–µ");
      await loadTableData();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–¥–∞—á–∏ –±–ª—é–¥–∞:", error);
      setError(
        error.response?.data?.message ||
          "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –±–ª—é–¥–æ –∫–∞–∫ –ø–æ–¥–∞–Ω–Ω–æ–µ"
      );
    }
  };

  // –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç–∞—Ç—É—Å "–ü–æ–¥–∞–Ω–æ"
  const handleMarkOrderServed = async (orderId) => {
    try {
      await $authHost.put(`/orders/${orderId}/served`);
      setSuccess("–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å '–ü–æ–¥–∞–Ω–æ'");
      await loadTableData();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç–∞—Ç—É—Å '–ü–æ–¥–∞–Ω–æ':", error);
      setError(
        error.response?.data?.message ||
          "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å '–ü–æ–¥–∞–Ω–æ'"
      );
    }
  };

  // –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"
  const handleMarkOrderPayment = async (orderId) => {
    try {
      await $authHost.put(`/orders/${orderId}/payment`);
      setSuccess("–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã'");

      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –ë–†–û–ù–ò –ü–†–ò –ü–ï–†–ï–í–û–î–ï –í –û–ü–õ–ê–¢–£
      const order = orders.find((o) => o.id === orderId);
      if (order) {
        await autoCompleteReservation(order.tableId, $authHost);
      }

      await loadTableData();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:", error);
      setError(
        error.response?.data?.message ||
          "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"
      );
    }
  };

  // –§–£–ù–ö–¶–ò–Ø: –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–∞
  const handleCloseOrder = async (orderId) => {
    try {
      const order = orders.find((o) => o.id === orderId);
      if (!order) return;

      await $authHost.put(`/orders/${orderId}/close`);
      setSuccess("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç");

      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –ë–†–û–ù–ò
      await autoCompleteReservation(order.tableId, $authHost);

      await loadTableData();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞:", error);
      if (error.response?.status === 400) {
        const errorData = error.response?.data;
        if (errorData?.forceCloseAvailable) {
          setError(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑: ${errorData.message}. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å?`
          );
        } else {
          setError(
            errorData?.message ||
              "–ù–µ –≤—Å–µ –±–ª—é–¥–∞ –ø–æ–¥–∞–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑."
          );
        }
      } else {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑");
      }
    }
  };

  // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—É–º–º—ã
  const calculateOrderTotal = (items) => {
    if (!items || !Array.isArray(items)) return 0;
    return items.reduce((total, item) => {
      const price = Number(item.price) || 0;
      const quantity = Number(item.quantity) || 0;
      return total + price * quantity;
    }, 0);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  const getOrderStatusInfo = (order) => {
    if (!order)
      return { status: "open", label: "–û—Ç–∫—Ä—ã—Ç", badgeClass: "primary" };

    const items = order.items || [];
    const readyItems = items.filter((item) => item.status === "ready").length;

    if (order.status === "served") {
      return { status: "served", label: "–ü–æ–¥–∞–Ω–æ", badgeClass: "info" };
    }
    if (order.status === "payment") {
      return {
        status: "payment",
        label: "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã",
        badgeClass: "warning",
      };
    }
    if (order.status === "closed") {
      return { status: "closed", label: "–ó–∞–∫—Ä—ã—Ç", badgeClass: "secondary" };
    } else if (readyItems > 0) {
      return {
        status: "ready",
        label: "–ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∞—á–µ",
        badgeClass: "success",
      };
    } else if (items.some((item) => item.status === "preparing")) {
      return {
        status: "in_progress",
        label: "–ì–æ—Ç–æ–≤–∏—Ç—Å—è",
        badgeClass: "warning",
      };
    } else {
      return { status: "open", label: "–û—Ç–∫—Ä—ã—Ç", badgeClass: "primary" };
    }
  };

  // –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–∞—Ç—å –±–ª—é–¥–æ
  const canServeDish = (item) => {
    return item.status === "ready";
  };

  // –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å "–ü–æ–¥–∞–Ω–æ"
  const canMarkOrderServed = (order) => {
    if (!order || !order.items || order.items.length === 0) return false;
    const allServed = order.items.every((item) => item.status === "served");
    const notAlreadyServed = order.status !== "served";
    return allServed && notAlreadyServed;
  };

  // –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
  const canMarkOrderPayment = (order) => {
    return order.status === "served";
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  const getTodayReservations = () => {
    const today = new Date().toISOString().split("T")[0];
    return reservations.filter((reservation) => {
      const reservationDate = new Date(reservation.reservedFrom)
        .toISOString()
        .split("T")[0];
      return reservationDate === today;
    });
  };

  const activeOrder = orders.length > 0 ? orders[0] : null;
  const orderStatusInfo = activeOrder ? getOrderStatusInfo(activeOrder) : null;
  const todayReservations = getTodayReservations();

  if (loading) {
    return (
      <div className="min-vh-100 bg-light">
        <Navbar />
        <div className="container-fluid py-4">
          <div
            className="d-flex justify-content-center align-items-center"
            style={{ height: "50vh" }}
          >
            <div className="spinner-border text-primary" role="status">
              <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!table) {
    return (
      <div className="min-vh-100 bg-light">
        <Navbar />
        <div className="container-fluid py-4">
          <div className="alert alert-danger">–°—Ç–æ–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
          <button className="btn btn-secondary" onClick={handleBack}>
            –ù–∞–∑–∞–¥ –∫ —Å—Ç–æ–ª–∏–∫–∞–º
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-vh-100 bg-light">
      <Navbar />

      <div className="container-fluid py-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="card bg-white shadow-sm">
              <div className="card-body">
                <div className="row align-items-center">
                  <div className="col-md-6">
                    <div className="d-flex align-items-center">
                      <button
                        className="btn btn-outline-secondary me-3"
                        onClick={handleBack}
                        title="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å—Ç–æ–ª–∏–∫–æ–≤"
                      >
                        <i className="bi bi-arrow-left"></i>
                      </button>
                      <div>
                        <h1 className="h3 mb-2">
                          <i className="bi bi-table me-2"></i>
                          –°—Ç–æ–ª–∏–∫: {table.name}
                          {socketService.getConnectionStatus() && (
                            <span className="badge bg-success ms-2">
                              <i className="bi bi-wifi"></i> Online
                            </span>
                          )}
                        </h1>
                        <p className="text-muted mb-0">
                          –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {table.capacity} —á–µ–ª–æ–≤–µ–∫
                        </p>
                      </div>
                    </div>
                  </div>
                  <div className="col-md-6 text-end">
                    <div className="btn-group">
                      <button
                        className="btn btn-primary"
                        onClick={
                          activeOrder
                            ? () => handleAddToOrder(activeOrder)
                            : handleCreateOrder
                        }
                      >
                        <i className="bi bi-plus-circle me-1"></i>
                        {activeOrder ? "–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞" : "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"}
                      </button>
                      <button
                        className="btn btn-outline-warning"
                        onClick={handleCreateReservation}
                      >
                        <i className="bi bi-calendar-plus me-1"></i>
                        –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {error && (
          <div className="row mb-3">
            <div className="col-12">
              <div className="alert alert-danger">
                <i className="bi bi-exclamation-triangle me-2"></i>
                {error}
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => setError("")}
                ></button>
              </div>
            </div>
          </div>
        )}

        {success && (
          <div className="row mb-3">
            <div className="col-12">
              <div className="alert alert-success">
                <i className="bi bi-check-circle me-2"></i>
                {success}
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => setSuccess("")}
                ></button>
              </div>
            </div>
          </div>
        )}

        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫—É—Ö–Ω–∏ */}
        {notifications.length > 0 && (
          <div className="row mb-4">
            <div className="col-12">
              <div className="card border-info">
                <div className="card-header bg-info text-white d-flex justify-content-between align-items-center">
                  <span>
                    <i className="bi bi-bell me-2"></i>
                    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫—É—Ö–Ω–∏ ({notifications.length})
                  </span>
                  <button
                    className="btn btn-sm btn-light"
                    onClick={clearNotifications}
                  >
                    <i className="bi bi-trash me-1"></i>
                    –û—á–∏—Å—Ç–∏—Ç—å
                  </button>
                </div>
                <div className="card-body">
                  <div className="row">
                    {notifications.map((notif) => (
                      <div key={notif.id} className="col-md-6 mb-2">
                        <div
                          className={`alert ${
                            notif.type === "order"
                              ? "alert-success"
                              : "alert-info"
                          } py-2`}
                        >
                          <small>
                            <strong>{notif.message}</strong>
                            <br />
                            <span className="text-muted">
                              <i className="bi bi-clock me-1"></i>
                              {notif.timestamp}
                            </span>
                            {notif.tableNumber && (
                              <>
                                <br />
                                <span className="text-muted">
                                  <i className="bi bi-table me-1"></i>
                                  –°—Ç–æ–ª: {notif.tableNumber}
                                </span>
                              </>
                            )}
                          </small>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –°—Ç–∞—Ç—É—Å —Å—Ç–æ–ª–∏–∫–∞ */}
        <div className="row mb-4">
          <div className="col-md-6">
            <div className="card">
              <div className="card-body text-center">
                <div
                  className={`display-6 text-${
                    activeOrder ? "danger" : "success"
                  }`}
                >
                  <i
                    className={`bi ${
                      activeOrder ? "bi-person-check-fill" : "bi-person-plus"
                    }`}
                  ></i>
                </div>
                <h5>{activeOrder ? "–ó–∞–Ω—è—Ç" : "–°–≤–æ–±–æ–¥–µ–Ω"}</h5>
              </div>
            </div>
          </div>
          <div className="col-md-6">
            <div className="card">
              <div className="card-body text-center">
                <div className="display-6 text-info">
                  <i className="bi bi-cup-straw"></i>
                </div>
                <h5>{activeOrder ? "–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑" : "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤"}</h5>
                {activeOrder && (
                  <small className="text-muted">
                    –°—É–º–º–∞: {calculateOrderTotal(activeOrder.items || [])}
                  </small>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="card">
              <div className="card-header bg-white p-0">
                <ul className="nav nav-tabs card-header-tabs">
                  <li className="nav-item">
                    <button
                      className={`nav-link ${
                        activeTab === "order" ? "active" : ""
                      }`}
                      onClick={() => setActiveTab("order")}
                    >
                      <i className="bi bi-cart me-2"></i>
                      –ó–∞–∫–∞–∑
                    </button>
                  </li>
                  <li className="nav-item">
                    <button
                      className={`nav-link ${
                        activeTab === "reservations" ? "active" : ""
                      }`}
                      onClick={() => setActiveTab("reservations")}
                    >
                      <i className="bi bi-calendar-event me-2"></i>
                      –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    </button>
                  </li>
                </ul>
              </div>

              <div className="card-body">
                {/* –í–∫–ª–∞–¥–∫–∞ –ó–∞–∫–∞–∑ */}
                {activeTab === "order" && (
                  <div>
                    {activeOrder ? (
                      <div>
                        <div className="d-flex justify-content-between align-items-center mb-4">
                          <h5>–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ #{activeOrder.id}</h5>
                          <div>
                            <span
                              className={`badge bg-${orderStatusInfo?.badgeClass} me-2`}
                            >
                              {orderStatusInfo?.label}
                            </span>

                            {canMarkOrderServed(activeOrder) && (
                              <button
                                className="btn btn-info btn-sm me-2"
                                onClick={() =>
                                  handleMarkOrderServed(activeOrder.id)
                                }
                              >
                                –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–¥–∞–Ω–Ω—ã–π
                              </button>
                            )}
                            {canMarkOrderPayment(activeOrder) && (
                              <button
                                className="btn btn-warning btn-sm me-2"
                                onClick={() =>
                                  handleMarkOrderPayment(activeOrder.id)
                                }
                              >
                                –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
                              </button>
                            )}
                            <button
                              className="btn btn-primary btn-sm me-2"
                              onClick={() => handleAddToOrder(activeOrder)}
                            >
                              –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞
                            </button>
                            <button
                              className="btn btn-success btn-sm"
                              onClick={() => handleCloseOrder(activeOrder.id)}
                            >
                              –ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑
                            </button>
                          </div>
                        </div>

                        <div className="table-responsive">
                          <table className="table table-hover">
                            <thead className="table-light">
                              <tr>
                                <th>–ë–ª—é–¥–æ</th>
                                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                                <th>–¶–µ–Ω–∞</th>
                                <th>–°—É–º–º–∞</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</th>
                                <th width="120">–î–µ–π—Å—Ç–≤–∏—è</th>
                              </tr>
                            </thead>
                            <tbody>
                              {(activeOrder.items || []).map((item) => (
                                <tr key={item.id}>
                                  <td>
                                    {item.dish?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ"}
                                  </td>
                                  <td>{item.quantity}</td>
                                  <td>
                                    {item.itemPrice || item.dish?.price || 0}
                                  </td>
                                  <td>
                                    {(
                                      (item.itemPrice ||
                                        item.dish?.price ||
                                        0) * (item.quantity || 0)
                                    ).toFixed(2)}{" "}
                                  </td>
                                  <td>
                                    <span
                                      className={`badge bg-${
                                        item.status === "ready"
                                          ? "success"
                                          : item.status === "preparing"
                                          ? "warning"
                                          : item.status === "served"
                                          ? "secondary"
                                          : "primary"
                                      }`}
                                    >
                                      {item.status === "ready"
                                        ? "–ì–æ—Ç–æ–≤–æ"
                                        : item.status === "preparing"
                                        ? "–ì–æ—Ç–æ–≤–∏—Ç—Å—è"
                                        : item.status === "served"
                                        ? "–ü–æ–¥–∞–Ω–æ"
                                        : "–ó–∞–∫–∞–∑–∞–Ω–æ"}
                                    </span>
                                  </td>
                                  <td>
                                    <small className="text-muted">
                                      {item.notes || "-"}
                                    </small>
                                  </td>
                                  <td>
                                    {canServeDish(item) && (
                                      <button
                                        className="btn btn-success btn-sm"
                                        onClick={() => handleServeDish(item.id)}
                                        title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–¥–∞–Ω–Ω–æ–µ"
                                      >
                                        <i className="bi bi-check-lg"></i>{" "}
                                        –ü–æ–¥–∞—Ç—å
                                      </button>
                                    )}
                                    {item.status === "served" && (
                                      <span className="badge bg-secondary">
                                        –ü–æ–¥–∞–Ω–æ
                                      </span>
                                    )}
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                            <tfoot>
                              <tr>
                                <td colSpan="3" className="text-end">
                                  <strong>–ò—Ç–æ–≥–æ:</strong>
                                </td>
                                <td colSpan="4">
                                  <strong>
                                    {calculateOrderTotal(
                                      activeOrder.items || []
                                    ).toFixed(2)}{" "}
                                  </strong>
                                </td>
                              </tr>
                            </tfoot>
                          </table>
                        </div>
                      </div>
                    ) : (
                      <div className="text-center py-5">
                        <i className="bi bi-cart display-1 text-muted"></i>
                        <h5 className="mt-3 text-muted">
                          –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                        </h5>
                        <p className="text-muted mb-4">
                          –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞
                        </p>
                        <button
                          className="btn btn-primary"
                          onClick={handleCreateOrder}
                        >
                          <i className="bi bi-plus-circle me-1"></i>
                          –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
                        </button>
                      </div>
                    )}
                  </div>
                )}

                {/* –í–∫–ª–∞–¥–∫–∞ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
                {activeTab === "reservations" && (
                  <div>
                    <div className="d-flex justify-content-between align-items-center mb-4">
                      <h5>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</h5>
                      <button
                        className="btn btn-outline-warning btn-sm"
                        onClick={handleCreateReservation}
                      >
                        <i className="bi bi-calendar-plus me-1"></i>
                        –î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                      </button>
                    </div>

                    {todayReservations.length === 0 ? (
                      <div className="text-center py-4">
                        <i className="bi bi-calendar-x display-1 text-muted"></i>
                        <p className="text-muted mt-3">
                          –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                        </p>
                      </div>
                    ) : (
                      <div className="table-responsive">
                        <table className="table table-hover">
                          <thead className="table-light">
                            <tr>
                              <th>–ö–ª–∏–µ–Ω—Ç</th>
                              <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                              <th>–í—Ä–µ–º—è</th>
                              <th>–ì–æ—Å—Ç–∏</th>
                              <th>–°—Ç–∞—Ç—É—Å</th>
                            </tr>
                          </thead>
                          <tbody>
                            {todayReservations.map((reservation) => (
                              <tr key={reservation.id}>
                                <td>{reservation.customerName}</td>
                                <td>{reservation.customerPhone}</td>
                                <td>
                                  {formatLocalDateTime(
                                    reservation.reservedFrom
                                  )}{" "}
                                  -{" "}
                                  {formatLocalDateTime(reservation.reservedTo)}
                                </td>
                                <td>
                                  <span className="badge bg-secondary">
                                    {reservation.guestCount} —á–µ–ª.
                                  </span>
                                </td>
                                <td>
                                  <span
                                    className={`badge ${
                                      reservation.status === "confirmed"
                                        ? "bg-warning"
                                        : reservation.status === "seated"
                                        ? "bg-success"
                                        : reservation.status === "completed"
                                        ? "bg-secondary"
                                        : "bg-light text-dark"
                                    }`}
                                  >
                                    {reservation.status === "confirmed"
                                      ? "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
                                      : reservation.status === "seated"
                                      ? "–ì–æ—Å—Ç–∏ –∑–∞ —Å—Ç–æ–ª–æ–º"
                                      : reservation.status === "completed"
                                      ? "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                                      : reservation.status}
                                  </span>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {showReservationModal && (
        <div
          className="modal show d-block"
          style={{ backgroundColor: "rgba(0,0,0,0.5)" }}
        >
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h5>
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => setShowReservationModal(false)}
                ></button>
              </div>
              <form onSubmit={handleReservationSubmit}>
                <div className="modal-body">
                  <div className="row g-3">
                    <div className="col-12">
                      <label className="form-label">–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ *</label>
                      <input
                        type="text"
                        className="form-control"
                        value={reservationForm.customerName}
                        onChange={(e) =>
                          setReservationForm({
                            ...reservationForm,
                            customerName: e.target.value,
                          })
                        }
                        required
                      />
                    </div>
                    <div className="col-12">
                      <label className="form-label">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
                      <input
                        type="tel"
                        className="form-control"
                        value={reservationForm.customerPhone}
                        onChange={(e) =>
                          setReservationForm({
                            ...reservationForm,
                            customerPhone: e.target.value,
                          })
                        }
                        required
                      />
                    </div>
                    <div className="col-12">
                      <label className="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π *</label>
                      <select
                        className="form-select"
                        value={reservationForm.guestCount}
                        onChange={(e) =>
                          setReservationForm({
                            ...reservationForm,
                            guestCount: parseInt(e.target.value),
                          })
                        }
                        required
                      >
                        {Array.from(
                          { length: table.capacity },
                          (_, i) => i + 1
                        ).map((num) => (
                          <option key={num} value={num}>
                            {num} —á–µ–ª–æ–≤–µ–∫
                          </option>
                        ))}
                      </select>
                    </div>
                    <div className="col-md-6">
                      <label className="form-label">–ù–∞—á–∞–ª–æ *</label>
                      <input
                        type="datetime-local"
                        className="form-control"
                        value={reservationForm.reservedFrom}
                        onChange={(e) =>
                          setReservationForm({
                            ...reservationForm,
                            reservedFrom: e.target.value,
                          })
                        }
                        required
                      />
                    </div>
                    <div className="col-md-6">
                      <label className="form-label">–ö–æ–Ω–µ—Ü *</label>
                      <input
                        type="datetime-local"
                        className="form-control"
                        value={reservationForm.reservedTo}
                        onChange={(e) =>
                          setReservationForm({
                            ...reservationForm,
                            reservedTo: e.target.value,
                          })
                        }
                        required
                      />
                    </div>
                  </div>
                </div>
                <div className="modal-footer">
                  <button
                    type="button"
                    className="btn btn-secondary"
                    onClick={() => setShowReservationModal(false)}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button type="submit" className="btn btn-primary">
                    –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫–∞–∑–∞ */}
      {showOrderModal && (
        <div
          className="modal show d-block"
          style={{ backgroundColor: "rgba(0,0,0,0.5)" }}
        >
          <div className="modal-dialog modal-lg">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">
                  {selectedOrder
                    ? `–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑ #${selectedOrder.id}`
                    : `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —Å—Ç–æ–ª–∏–∫–∞ ${table.name}`}
                </h5>
                {selectedOrder && (
                  <span className="badge bg-info ms-2">
                    –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥
                  </span>
                )}
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => setShowOrderModal(false)}
                ></button>
              </div>
              <form onSubmit={handleOrderSubmit}>
                <div className="modal-body">
                  <div className="row g-3">
                    <div className="col-12">
                      <div className="card">
                        <div className="card-header">
                          <h6 className="mb-0">–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ</h6>
                        </div>
                        <div className="card-body">
                          <div className="row g-2">
                            <div className="col-md-5">
                              <select
                                className="form-select"
                                value={newOrderItem.dishId}
                                onChange={(e) =>
                                  setNewOrderItem({
                                    ...newOrderItem,
                                    dishId: e.target.value,
                                  })
                                }
                              >
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ</option>
                                {dishes
                                  .filter(
                                    (dish) => dish.isActive && !dish.isStopped
                                  )
                                  .map((dish) => (
                                    <option key={dish.id} value={dish.id}>
                                      {dish.name} - {dish.price}
                                    </option>
                                  ))}
                              </select>
                            </div>
                            <div className="col-md-2">
                              <input
                                type="number"
                                className="form-control"
                                min="1"
                                value={newOrderItem.quantity}
                                onChange={(e) =>
                                  setNewOrderItem({
                                    ...newOrderItem,
                                    quantity: parseInt(e.target.value),
                                  })
                                }
                              />
                            </div>
                            <div className="col-md-3">
                              <input
                                type="text"
                                className="form-control"
                                placeholder="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
                                value={newOrderItem.notes}
                                onChange={(e) =>
                                  setNewOrderItem({
                                    ...newOrderItem,
                                    notes: e.target.value,
                                  })
                                }
                              />
                            </div>
                            <div className="col-md-2">
                              <button
                                type="button"
                                className="btn btn-primary w-100"
                                onClick={handleAddOrderItem}
                              >
                                –î–æ–±–∞–≤–∏—Ç—å
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="col-12">
                      <div className="card">
                        <div className="card-header d-flex justify-content-between align-items-center">
                          <h6 className="mb-0">
                            {selectedOrder
                              ? "–ù–æ–≤—ã–µ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ"
                              : "–ë–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ"}
                          </h6>
                          <div>
                            <span className="badge bg-primary me-2">
                              {orderForm.items.length} –±–ª—é–¥
                            </span>
                            <span className="badge bg-success">
                              –ò—Ç–æ–≥–æ:{" "}
                              {calculateOrderTotal(orderForm.items).toFixed(2)}{" "}
                            </span>
                          </div>
                        </div>
                        <div className="card-body">
                          {orderForm.items.length === 0 ? (
                            <p className="text-muted text-center mb-0">
                              {selectedOrder
                                ? "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑"
                                : "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª—é–¥"}
                            </p>
                          ) : (
                            <div className="table-responsive">
                              <table className="table table-sm">
                                <thead>
                                  <tr>
                                    <th>–ë–ª—é–¥–æ</th>
                                    <th>–¶–µ–Ω–∞</th>
                                    <th>–ö–æ–ª-–≤–æ</th>
                                    <th>–°—É–º–º–∞</th>
                                    <th>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</th>
                                    <th width="80">–î–µ–π—Å—Ç–≤–∏—è</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {orderForm.items.map((item, index) => (
                                    <tr key={item.id}>
                                      <td>
                                        {item.dish?.name}
                                        {selectedOrder && (
                                          <span className="badge bg-success ms-1">
                                            –ù–æ–≤–æ–µ
                                          </span>
                                        )}
                                      </td>
                                      <td>{item.price}</td>
                                      <td>{item.quantity}</td>
                                      <td>
                                        {(
                                          (item.price || 0) *
                                          (item.quantity || 0)
                                        ).toFixed(2)}{" "}
                                      </td>
                                      <td>
                                        <small className="text-muted">
                                          {item.notes || ""}
                                        </small>
                                      </td>
                                      <td>
                                        <button
                                          type="button"
                                          className="btn btn-outline-danger btn-sm"
                                          onClick={() => {
                                            setOrderForm((prev) => ({
                                              ...prev,
                                              items: prev.items.filter(
                                                (_, i) => i !== index
                                              ),
                                            }));
                                          }}
                                        >
                                          <i className="bi bi-trash"></i>
                                        </button>
                                      </td>
                                    </tr>
                                  ))}
                                </tbody>
                                <tfoot>
                                  <tr>
                                    <td colSpan="3" className="text-end">
                                      <strong>–ò—Ç–æ–≥–æ:</strong>
                                    </td>
                                    <td colSpan="3">
                                      <strong>
                                        {calculateOrderTotal(
                                          orderForm.items
                                        ).toFixed(2)}{" "}
                                      </strong>
                                    </td>
                                  </tr>
                                </tfoot>
                              </table>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="modal-footer">
                  <button
                    type="button"
                    className="btn btn-secondary"
                    onClick={() => setShowOrderModal(false)}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    type="submit"
                    className="btn btn-primary"
                    disabled={orderForm.items.length === 0}
                  >
                    {selectedOrder ? "–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞" : "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default WaiterTable;
