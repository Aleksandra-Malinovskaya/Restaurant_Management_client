import React, { useState, useEffect } from "react";
import Navbar from "../../NavBar";
import { useAuth } from "../../../context/AuthContext";
import { useNavigate } from "react-router-dom";
import { $authHost } from "../../../http";

const Admin = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [stats, setStats] = useState({
    activeOrders: 0,
    freeTables: 0,
    todayReservations: 0,
    stoppedDishes: 0,
    activeEmployees: 0,
    todayRevenue: 0,
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏
  const safeFilter = (data, filterFn) => {
    if (!Array.isArray(data)) {
      console.warn("–î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:", data);
      return [];
    }
    return data.filter(filterFn);
  };

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const extractData = (responseData) => {
    console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API:", responseData);

    if (Array.isArray(responseData)) {
      return responseData;
    } else if (responseData && Array.isArray(responseData.rows)) {
      return responseData.rows;
    } else if (responseData && Array.isArray(responseData.data)) {
      return responseData.data;
    } else if (responseData && typeof responseData === "object") {
      // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –æ–±—ä–µ–∫—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–∞—Å—Å–∏–≤ –≤–Ω—É—Ç—Ä–∏
      for (let key in responseData) {
        if (Array.isArray(responseData[key])) {
          return responseData[key];
        }
      }
    }
    return [];
  };

  const formatCurrency = (amount) => {
    const numAmount = parseFloat(amount) || 0;
    return new Intl.NumberFormat("ru-RU", {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(numAmount);
  };

  // –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–°–ß–ï–¢–ê –°–í–û–ë–û–î–ù–´–• –°–¢–û–õ–û–í - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
  const calculateFreeTables = (tablesData, ordersData, reservationsData) => {
    const now = new Date();
    let freeTablesCount = 0;

    console.log("üîç –†–∞—Å—á–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤...");

    tablesData.forEach((table) => {
      // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Å—Ç–æ–ª–∞
      const tableOrders = ordersData.filter(
        (order) =>
          order.tableId === table.id &&
          ["open", "in_progress", "ready", "payment"].includes(order.status)
      );

      // –¢–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–æ–ª–∞
      const currentReservation = reservationsData.find(
        (reservation) =>
          reservation.tableId === table.id &&
          new Date(reservation.reservedFrom) <= now &&
          new Date(reservation.reservedTo) >= now &&
          ["confirmed", "seated"].includes(reservation.status)
      );

      // –°—Ç–æ–ª —Å–≤–æ–±–æ–¥–µ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ò –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      const isFree = tableOrders.length === 0 && !currentReservation;

      if (isFree) {
        freeTablesCount++;
      }

      console.log(`–°—Ç–æ–ª ${table.name || table.id}:`, {
        –∑–∞–∫–∞–∑—ã: tableOrders.length,
        –±—Ä–æ–Ω—å: currentReservation
          ? `${currentReservation.status} (${currentReservation.customerName})`
          : "–Ω–µ—Ç",
        —Å–≤–æ–±–æ–¥–µ–Ω: isFree,
      });
    });

    console.log(
      `üìä –ò—Ç–æ–≥: ${freeTablesCount} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–∑ ${tablesData.length} —Å—Ç–æ–ª–æ–≤`
    );
    return freeTablesCount;
  };

  const loadStatistics = async () => {
    try {
      setLoading(true);
      setError("");

      console.log("üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...");

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      const [
        ordersResponse,
        tablesResponse,
        usersResponse,
        dishesResponse,
        reservationsResponse,
      ] = await Promise.all([
        $authHost.get("/orders").catch((err) => {
          console.error(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:",
            err.response?.data || err.message
          );
          return { data: [] };
        }),
        $authHost.get("/tables").catch((err) => {
          console.error(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ª–æ–≤:",
            err.response?.data || err.message
          );
          return { data: [] };
        }),
        $authHost.get("/users").catch((err) => {
          console.error(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            err.response?.data || err.message
          );
          return { data: [] };
        }),
        $authHost.get("/dishes").catch((err) => {
          console.error(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥:",
            err.response?.data || err.message
          );
          return { data: { rows: [] } };
        }),
        $authHost.get("/reservations").catch((err) => {
          console.error(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:",
            err.response?.data || err.message
          );
          return { data: [] };
        }),
      ]);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
      const ordersData = extractData(ordersResponse.data);
      const tablesData = extractData(tablesResponse.data);
      const usersData = extractData(usersResponse.data);
      const dishesData = extractData(dishesResponse.data);
      const reservationsData = extractData(reservationsResponse.data);

      console.log("üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", {
        orders: ordersData.length,
        tables: tablesData.length,
        users: usersData.length,
        dishes: dishesData.length,
        reservations: reservationsData.length,
      });

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

      // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã–µ)
      const activeOrders = safeFilter(
        ordersData,
        (order) => order.status !== "closed" && order.status !== "cancelled"
      ).length;

      // –°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–æ–ª—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
      const freeTables = calculateFreeTables(
        tablesData,
        ordersData,
        reservationsData
      );

      // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
      const activeEmployees = safeFilter(
        usersData,
        (user) => user.isActive === true
      ).length;

      // –ë–ª—é–¥–∞ –Ω–∞ —Å—Ç–æ–ø–µ
      const stoppedDishes = safeFilter(
        dishesData,
        (dish) => dish.isStopped === true
      ).length;

      // –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const today = new Date().toISOString().split("T")[0];
      const todayRevenue = safeFilter(ordersData, (order) => {
        if (!order.createdAt && !order.createdDate) return false;

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å –¥–∞—Ç–æ–π
        const orderDateStr = order.createdAt || order.createdDate || order.date;
        if (!orderDateStr) return false;

        try {
          const orderDate = new Date(orderDateStr).toISOString().split("T")[0];
          const isToday = orderDate === today;
          const isClosed = order.status === "closed";

          return isToday && isClosed;
        } catch (e) {
          console.warn("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞:", orderDateStr);
          return false;
        }
      }).reduce((sum, order) => {
        const amount = parseFloat(
          order.totalAmount || order.amount || order.price || 0
        );
        return sum + (isNaN(amount) ? 0 : amount);
      }, 0);

      // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const todayReservations = safeFilter(reservationsData, (reservation) => {
        if (!reservation.reservedFrom && !reservation.date) return false;

        const reservationDateStr = reservation.reservedFrom || reservation.date;

        try {
          const reservationDate = new Date(reservationDateStr)
            .toISOString()
            .split("T")[0];

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
          const isConfirmed =
            reservation.status === "confirmed" ||
            reservation.status === "active" ||
            reservation.isActive === true;

          return reservationDate === today && isConfirmed;
        } catch (e) {
          console.warn(
            "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reservationDateStr
          );
          return false;
        }
      }).length;

      const newStats = {
        activeOrders,
        freeTables,
        todayReservations,
        stoppedDishes,
        activeEmployees,
        todayRevenue,
      };

      console.log("‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", newStats);
      console.log("üìà –í—Å–µ–≥–æ —Å—Ç–æ–ª–æ–≤:", tablesData.length);
      console.log("üÜì –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤:", freeTables);

      setStats(newStats);
    } catch (error) {
      console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      const errorMessage = `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ${error.message}`;
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadStatistics();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const adminCards = [
    {
      title: "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –∏ —Ä–æ–ª—è–º–∏",
      path: "/admin/users",
      color: "primary",
      icon: "bi-people-fill",
      role: "super_admin",
    },
    {
      title: "üçΩÔ∏è –ë–ª—é–¥–∞",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
      path: "/admin/dishes",
      color: "success",
      icon: "bi-egg-fried",
      role: "admin",
    },
    {
      title: "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –±–ª—é–¥",
      path: "/admin/categories",
      color: "info",
      icon: "bi-folder-fill",
      role: "admin",
    },
    {
      title: "ü™ë –°—Ç–æ–ª–∏–∫–∏ –∏ –∑–∞–∫–∞–∑—ã",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞–º–∏ –∏ QR-–∫–æ–¥–∞–º–∏",
      path: "/admin/tables",
      color: "warning",
      icon: "bi-table",
      role: "admin",
    },
    {
      title: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
      description: "–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
      path: "/admin/statistics",
      color: "dark",
      icon: "bi-graph-up",
      role: "admin",
    },
  ];

  const handleCardClick = (path) => {
    navigate(path);
  };

  const getAvailableCards = () => {
    return adminCards.filter(
      (card) => user?.role === "super_admin" || card.role !== "super_admin"
    );
  };

  const handleRefreshStats = () => {
    loadStatistics();
  };

  if (loading) {
    return (
      <div className="min-vh-100 bg-light">
        <Navbar />
        <div className="d-flex justify-content-center align-items-center vh-100">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
        </div>
      </div>
    );
  }

  const availableCards = getAvailableCards();

  return (
    <div className="min-vh-100 bg-light">
      <Navbar />

      <div className="container-fluid py-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="card bg-white shadow-sm">
              <div className="card-body">
                <div className="row align-items-center">
                  <div className="col-md-8">
                    <h1 className="h3 mb-2">
                      <i className="bi bi-speedometer2 me-2"></i>
                      {user?.role === "super_admin"
                        ? "–ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                        : "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}
                    </h1>
                    <p className="text-muted mb-0">
                      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.firstName} {user?.lastName}
                    </p>
                  </div>
                  <div className="col-md-4 text-end">
                    <span
                      className={`badge ${
                        user?.role === "super_admin"
                          ? "bg-danger"
                          : "bg-primary"
                      } fs-6`}
                    >
                      {user?.role === "super_admin"
                        ? "–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                        : "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
        {error && (
          <div className="row mb-4">
            <div className="col-12">
              <div className="alert alert-warning d-flex align-items-center justify-content-between">
                <div>
                  <i className="bi bi-exclamation-triangle me-2"></i>
                  {error}
                </div>
                <button
                  className="btn btn-sm btn-outline-warning"
                  onClick={handleRefreshStats}
                >
                  <i className="bi bi-arrow-clockwise me-1"></i>
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="row mb-4">
          <div className="col-12">
            <div className="card border-info">
              <div className="card-header bg-info text-white d-flex justify-content-between align-items-center">
                <span>
                  <i className="bi bi-info-circle me-2"></i>
                  –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </span>
                <div>
                  <small className="me-3">
                    –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date().toLocaleTimeString()}
                  </small>
                  <button
                    className="btn btn-sm btn-light"
                    onClick={handleRefreshStats}
                    disabled={loading}
                  >
                    <i className="bi bi-arrow-clockwise me-1"></i>
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </button>
                </div>
              </div>
              <div className="card-body">
                <div className="row text-center">
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-primary mb-1">
                        {stats.activeOrders}
                      </h4>
                      <small className="text-muted">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-success mb-1">{stats.freeTables}</h4>
                      <small className="text-muted">–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-warning mb-1">
                        {stats.todayReservations}
                      </h4>
                      <small className="text-muted">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-danger mb-1">
                        {stats.stoppedDishes}
                      </h4>
                      <small className="text-muted">–ë–ª—é–¥ –Ω–∞ —Å—Ç–æ–ø–µ</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-info mb-1">
                        {stats.activeEmployees}
                      </h4>
                      <small className="text-muted">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</small>
                    </div>
                  </div>
                  <div className="col-md-2 mb-3">
                    <div className="border rounded p-3 bg-light">
                      <h4 className="text-dark mb-1">
                        {formatCurrency(stats.todayRevenue)}
                      </h4>
                      <small className="text-muted">–í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è</small>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ */}
        <div className="row">
          <div className="col-12">
            <h4 className="mb-3">
              <i className="bi bi-grid-3x3-gap me-2"></i>
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
            </h4>
          </div>
        </div>

        {/* –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º */}
        <div className="row g-3 justify-content-center">
          {availableCards.map((card, index) => (
            <div
              key={index}
              className={
                availableCards.length === 2
                  ? "col-xl-4 col-lg-5 col-md-6"
                  : "col-xl-4 col-lg-6 col-md-6"
              }
            >
              <div
                className={`card border-${card.color} shadow-sm h-100`}
                style={{ cursor: "pointer", transition: "all 0.3s" }}
                onClick={() => handleCardClick(card.path)}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = "translateY(-5px)";
                  e.currentTarget.style.boxShadow =
                    "0 8px 25px rgba(0,0,0,0.15)";
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = "translateY(0)";
                  e.currentTarget.style.boxShadow =
                    "0 2px 10px rgba(0,0,0,0.1)";
                }}
              >
                <div className="card-body text-center">
                  <i
                    className={`bi ${card.icon} text-${card.color} display-4 mb-3`}
                  ></i>
                  <h5 className="card-title">{card.title}</h5>
                  <p className="card-text text-muted">{card.description}</p>
                </div>
                <div
                  className={`card-footer bg-${card.color} bg-opacity-10 text-center`}
                >
                  <small className="text-muted">
                    <i className="bi bi-arrow-right me-1"></i>
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
                  </small>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Admin;
