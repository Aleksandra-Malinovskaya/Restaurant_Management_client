import { io } from "socket.io-client";

class SocketService {
  constructor() {
    this.socket = null;
    this.isConnected = false;
  }

  connect() {
    if (this.socket && this.isConnected) {
      return this.socket;
    }

    this.socket = io("http://localhost:5000", {
      transports: ["websocket", "polling"],
    });

    this.socket.on("connect", () => {
      console.log("‚úÖ WebSocket connected, ID:", this.socket.id);
      this.isConnected = true;
    });

    this.socket.on("disconnect", () => {
      console.log("‚ùå WebSocket disconnected");
      this.isConnected = false;
    });

    this.socket.on("connect_error", (error) => {
      console.error("‚ùå WebSocket connection error:", error);
      this.isConnected = false;
    });

    return this.socket;
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userConnected(userData) {
    if (this.socket && this.isConnected) {
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ user_connected:", userData);
      this.socket.emit("user_connected", userData);
    } else {
      console.log("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ user_connected");
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–≤–∞—Ä–∞
  subscribeToChefNotifications(callback) {
    if (this.socket) {
      console.log("üë®‚Äçüç≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–≤–∞—Ä–∞");
      this.socket.on("new_order_notification", callback);
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
  subscribeToWaiterOrderNotifications(callback) {
    if (this.socket) {
      console.log("üë®‚Äçüíº –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö");
      this.socket.on("order_ready_notification", callback);
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –æ –≥–æ—Ç–æ–≤—ã—Ö –±–ª—é–¥–∞—Ö
  subscribeToWaiterDishNotifications(callback) {
    if (this.socket) {
      console.log("üçΩÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤—ã—Ö –±–ª—é–¥–∞—Ö");
      this.socket.on("dish_ready_notification", callback);
    }
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  unsubscribeAll() {
    if (this.socket) {
      console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö WebSocket –ø–æ–¥–ø–∏—Å–æ–∫");
      this.socket.off("new_order_notification");
      this.socket.off("order_ready_notification");
      this.socket.off("dish_ready_notification");
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  getConnectionStatus() {
    return this.isConnected;
  }
}

const socketService = new SocketService();
export default socketService;
